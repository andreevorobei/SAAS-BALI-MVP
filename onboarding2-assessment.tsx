import React, { useState, useRef, useEffect } from 'react';
import { ArrowLeft, ArrowRight, Bot, User, Send, SkipForward, Sparkles, Target, Brain, Heart, Zap } from 'lucide-react';

const OnboardingAssessment = () => {
  // –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–±—ã—á–Ω–æ –ø—Ä–∏—Ö–æ–¥—è—Ç –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —ç–∫—Ä–∞–Ω–∞)
  const [userName] = useState("–ê–Ω–¥—Ä–µ–π");
  
  // –í–æ–ø—Ä–æ—Å—ã –¥–ª—è –æ—Ü–µ–Ω–∫–∏
  const questions = [
    {
      id: 1,
      text: "–ü—Ä–∏–≤–µ—Ç, –ê–Ω–¥—Ä–µ–π! –Ø Jess, —Ç–≤–æ–π –ò–ò-–Ω–∞—Å—Ç–∞–≤–Ω–∏–∫. –î–∞–≤–∞–π —É–∑–Ω–∞–µ–º —Ç–≤–æ–∏ —Å—É–ø–µ—Ä—Å–∏–ª—ã! ‚ú®\n\n–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–∏—Ç—É–∞—Ü–∏–∏, –∫–æ–≥–¥–∞ —Ç—ã –≥–æ—Ä–¥–∏–ª—Å—è —Å–≤–æ–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –Ω–∞ —Ä–∞–±–æ—Ç–µ –∏–ª–∏ –≤ —É—á–µ–±–µ?",
      category: "achievements",
      isWelcome: true
    },
    {
      id: 2,
      text: "–û—Ç–ª–∏—á–Ω–æ! –ê —Ç–µ–ø–µ—Ä—å —Å–∫–∞–∂–∏, —á—Ç–æ —Ç–µ–±–µ –Ω—Ä–∞–≤–∏—Ç—Å—è –¥–µ–ª–∞—Ç—å –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –≤ —Ä–∞–±–æ—Ç–µ? –ß—Ç–æ –ø—Ä–∏–Ω–æ—Å–∏—Ç —Ç–µ–±–µ –Ω–∞–∏–±–æ–ª—å—à–µ–µ —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ?",
      category: "preferences"
    },
    {
      id: 3,
      text: "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ! –ê –∫–∞–∫ —Ç—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—à—å —Ä–µ—à–∞—Ç—å —Å–ª–æ–∂–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã? –î–µ–π—Å—Ç–≤—É–µ—à—å –±—ã—Å—Ç—Ä–æ –ø–æ –∏–Ω—Ç—É–∏—Ü–∏–∏ –∏–ª–∏ —Ç—â–∞—Ç–µ–ª—å–Ω–æ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—à—å –≤—Å–µ –¥–µ—Ç–∞–ª–∏?",
      category: "problem_solving"
    },
    {
      id: 4,
      text: "–ü–æ–Ω—è—Ç–Ω–æ! –ß—Ç–æ –¥–ª—è —Ç–µ–±—è –≤–∞–∂–Ω–µ–µ: —Ä–∞–±–æ—Ç–∞—Ç—å —Å –ª—é–¥—å–º–∏, –≤—ã—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –æ—Ç–Ω–æ—à–µ–Ω–∏—è –∏ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏, –∏–ª–∏ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –¥–∞–Ω–Ω—ã–º–∏, —Å–∏—Å—Ç–µ–º–∞–º–∏ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π?",
      category: "work_style"
    },
    {
      id: 5,
      text: "–•–æ—Ä–æ—à–æ! –û–ø–∏—à–∏ —Å–≤–æ–π –∏–¥–µ–∞–ª—å–Ω—ã–π —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å. –ö–∞–∫ –±—ã —Ç—ã —Ö–æ—Ç–µ–ª –ø—Ä–æ–≤–æ–¥–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞ —Ä–∞–±–æ—Ç–µ?",
      category: "ideal_day"
    },
    {
      id: 6,
      text: "–û—Ç–ª–∏—á–Ω–æ! –ß—Ç–æ —Ç–µ–±—è –±–æ–ª—å—à–µ –º–æ—Ç–∏–≤–∏—Ä—É–µ—Ç: —Å–æ–∑–¥–∞–≤–∞—Ç—å —á—Ç–æ-—Ç–æ –Ω–æ–≤–æ–µ —Å –Ω—É–ª—è –∏–ª–∏ —É–ª—É—á—à–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –∏ —Å–∏—Å—Ç–µ–º—ã?",
      category: "motivation"
    },
    {
      id: 7,
      text: "–ü–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å! –ö–∞–∫ —Ç—ã –æ—Ç–Ω–æ—Å–∏—à—å—Å—è –∫ —Ä–∏—Å–∫—É –∏ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç–∏? –¢—ã –≥–æ—Ç–æ–≤ —Ä–∏—Å–∫–æ–≤–∞—Ç—å —Ä–∞–¥–∏ –±–æ–ª—å—à–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏–ª–∏ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—à—å —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å?",
      category: "risk_tolerance"
    }
  ];

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ —á–∞—Ç–∞
  const [messages, setMessages] = useState([]);
  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
  const [inputMessage, setInputMessage] = useState('');
  const [isTyping, setIsTyping] = useState(false);
  const [isCompleted, setIsCompleted] = useState(false);
  const [userAnswers, setUserAnswers] = useState([]);
  
  const messagesEndRef = useRef(null);

  // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ –∫–æ–Ω—Ü—É —á–∞—Ç–∞
  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
  useEffect(() => {
    if (messages.length === 0) {
      setTimeout(() => {
        addJessMessage(questions[0].text, questions[0].isWelcome);
      }, 1000);
    }
  }, []);

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç Jess
  const addJessMessage = (content, isWelcome = false) => {
    setIsTyping(true);
    
    setTimeout(() => {
      const newMessage = {
        id: Date.now(),
        type: 'ai',
        content: content,
        timestamp: new Date().toLocaleTimeString('ru', { hour: '2-digit', minute: '2-digit' }),
        isWelcome: isWelcome
      };
      
      setMessages(prev => [...prev, newMessage]);
      setIsTyping(false);
    }, 1500);
  };

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const sendAnswer = (message) => {
    if (!message.trim()) return;

    // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userMessage = {
      id: Date.now(),
      type: 'user',
      content: message,
      timestamp: new Date().toLocaleTimeString('ru', { hour: '2-digit', minute: '2-digit' })
    };

    setMessages(prev => [...prev, userMessage]);
    setInputMessage('');

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
    const currentAnswer = {
      questionId: questions[currentQuestionIndex].id,
      question: questions[currentQuestionIndex].text,
      answer: message,
      category: questions[currentQuestionIndex].category
    };
    
    setUserAnswers(prev => [...prev, currentAnswer]);

    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
    setTimeout(() => {
      nextQuestion();
    }, 1000);
  };

  // –ü—Ä–æ–ø—É—Å–∫ –≤–æ–ø—Ä–æ—Å–∞
  const skipQuestion = () => {
    const skipAnswer = {
      questionId: questions[currentQuestionIndex].id,
      question: questions[currentQuestionIndex].text,
      answer: "–ü—Ä–æ–ø—É—â–µ–Ω",
      category: questions[currentQuestionIndex].category,
      skipped: true
    };
    
    setUserAnswers(prev => [...prev, skipAnswer]);
    nextQuestion();
  };

  // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
  const nextQuestion = () => {
    const nextIndex = currentQuestionIndex + 1;
    
    if (nextIndex < questions.length) {
      setCurrentQuestionIndex(nextIndex);
      setTimeout(() => {
        addJessMessage(questions[nextIndex].text);
      }, 500);
    } else {
      // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏
      setTimeout(() => {
        addJessMessage("–û—Ç–ª–∏—á–Ω–æ! –Ø –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª–∞ —Ç–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã –∏ –≥–æ—Ç–æ–≤–∞ –ø–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã. –î–∞–≤–∞–π –ø–æ—Å–º–æ—Ç—Ä–∏–º, –∫–∞–∫–∏–µ —É —Ç–µ–±—è —Å—É–ø–µ—Ä—Å–∏–ª—ã! üöÄ");
        setIsCompleted(true);
      }, 500);
    }
  };

  // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç–∫—Ä–∞–Ω—É
  const proceedToResults = () => {
    console.log('–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º —Å –æ—Ç–≤–µ—Ç–∞–º–∏:', userAnswers);
    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥ –∫ —ç–∫—Ä–∞–Ω—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  };

  // –í–æ–∑–≤—Ä–∞—Ç –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —ç–∫—Ä–∞–Ω—É
  const goBack = () => {
    console.log('–í–æ–∑–≤—Ä–∞—Ç –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —ç–∫—Ä–∞–Ω—É');
    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –≤–æ–∑–≤—Ä–∞—Ç –∫ —ç–∫—Ä–∞–Ω—É –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-purple-50 via-white to-blue-50 flex flex-col">
      {/* –•–µ–¥–µ—Ä —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º - –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω */}
      <div className="fixed top-0 left-0 right-0 z-40 bg-white shadow-sm">
        {/* –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä */}
        <div className="max-w-4xl mx-auto px-6 py-4">
          <div className="flex items-center justify-between text-sm text-gray-600 mb-2">
            <span>–û—Ü–µ–Ω–∫–∞ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π</span>
            <span>2 –∏–∑ 5</span>
          </div>
          <div className="w-full bg-gray-200 rounded-full h-2">
            <div 
              className="bg-gradient-to-r from-purple-500 to-blue-600 h-2 rounded-full transition-all duration-1000 ease-out"
              style={{ width: '40%' }}
            ></div>
          </div>
        </div>
        
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <div className="border-b border-gray-200 px-6 py-4">
          <div className="max-w-4xl mx-auto flex items-center justify-between">
            <div className="flex items-center gap-4">
              <button
                onClick={goBack}
                className="p-2 hover:bg-gray-100 rounded-lg transition-colors"
              >
                <ArrowLeft className="w-5 h-5 text-gray-600" />
              </button>
              <div>
                <h1 className="text-2xl font-bold text-gray-900">
                  –î–∞–≤–∞–π —É–∑–Ω–∞–µ–º —Ç–≤–æ–∏ —Å—É–ø–µ—Ä—Å–∏–ª—ã, {userName}!
                </h1>
                <p className="text-sm text-gray-600">Jess –∑–∞–¥–∞—Å—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞</p>
              </div>
            </div>
            
            {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –≤–æ–ø—Ä–æ—Å–æ–≤ */}
            <div className="text-right">
              <div className="text-sm text-gray-600 mb-1">
                –í–æ–ø—Ä–æ—Å {Math.min(currentQuestionIndex + 1, questions.length)} –∏–∑ {questions.length}
              </div>
              <div className="flex gap-1">
                {questions.map((_, index) => (
                  <div
                    key={index}
                    className={`w-2 h-2 rounded-full transition-all duration-300 ${
                      index < currentQuestionIndex
                        ? 'bg-green-500'
                        : index === currentQuestionIndex
                        ? 'bg-purple-500'
                        : 'bg-gray-300'
                    }`}
                  ></div>
                ))}
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* –ß–∞—Ç - —Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π */}
      <div className="flex-1 overflow-y-auto" style={{ paddingTop: '160px' }}>
        <div className="max-w-4xl mx-auto p-6 space-y-6 pb-48">
          {messages.map((message) => (
            <div key={message.id} className={`flex gap-4 ${message.type === 'user' ? 'justify-end' : 'justify-start'}`}>
              {message.type === 'ai' && (
                <div className="w-12 h-12 bg-gradient-to-r from-purple-500 to-pink-500 rounded-full flex items-center justify-center flex-shrink-0">
                  <Bot className="w-6 h-6 text-white" />
                </div>
              )}
              
              <div className={`${message.type === 'user' ? 'max-w-lg' : 'max-w-2xl'}`}>
                <div className={`px-6 py-4 rounded-2xl ${
                  message.type === 'user' 
                    ? 'bg-gradient-to-r from-purple-500 to-blue-600 text-white' 
                    : 'bg-white border border-gray-200 text-gray-900 shadow-sm'
                }`}>
                  <div className="whitespace-pre-wrap leading-relaxed">{message.content}</div>
                  <div className={`text-xs mt-2 ${message.type === 'user' ? 'text-purple-100' : 'text-gray-500'}`}>
                    {message.timestamp}
                  </div>
                </div>
                
                {/* –ò–∫–æ–Ω–∫–∏ —Å—É–ø–µ—Ä—Å–∏–ª –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è */}
                {message.isWelcome && (
                  <div className="flex items-center gap-2 mt-3 pl-2">
                    <Sparkles className="w-4 h-4 text-yellow-500" />
                    <Brain className="w-4 h-4 text-blue-500" />
                    <Heart className="w-4 h-4 text-red-500" />
                    <Zap className="w-4 h-4 text-purple-500" />
                    <Target className="w-4 h-4 text-green-500" />
                  </div>
                )}
              </div>

              {message.type === 'user' && (
                <div className="w-12 h-12 bg-gradient-to-r from-blue-500 to-purple-600 rounded-full flex items-center justify-center flex-shrink-0">
                  <User className="w-6 h-6 text-white" />
                </div>
              )}
            </div>
          ))}
          
          {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∏ */}
          {isTyping && (
            <div className="flex gap-4 justify-start">
              <div className="w-12 h-12 bg-gradient-to-r from-purple-500 to-pink-500 rounded-full flex items-center justify-center flex-shrink-0">
                <Bot className="w-6 h-6 text-white" />
              </div>
              <div className="bg-white border border-gray-200 px-6 py-4 rounded-2xl shadow-sm">
                <div className="flex space-x-2">
                  <div className="w-2 h-2 bg-purple-400 rounded-full animate-bounce"></div>
                  <div className="w-2 h-2 bg-purple-400 rounded-full animate-bounce" style={{animationDelay: '0.1s'}}></div>
                  <div className="w-2 h-2 bg-purple-400 rounded-full animate-bounce" style={{animationDelay: '0.2s'}}></div>
                </div>
              </div>
            </div>
          )}
          
          <div ref={messagesEndRef} />
        </div>
      </div>

      {/* –ü–æ–ª–µ –≤–≤–æ–¥–∞ - –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ –≤–Ω–∏–∑—É */}
      <div className="fixed bottom-0 left-0 right-0 bg-white border-t-2 border-gray-200 py-8 px-6 shadow-xl z-30">
        <div className="max-w-4xl mx-auto">
          {!isCompleted ? (
            <div className="space-y-4">
              {/* –û—Å–Ω–æ–≤–Ω–æ–µ –ø–æ–ª–µ –≤–≤–æ–¥–∞ */}
              <div className="flex gap-4 items-end">
                <div className="flex-1">
                  <textarea
                    value={inputMessage}
                    onChange={(e) => setInputMessage(e.target.value)}
                    onKeyPress={(e) => {
                      if (e.key === 'Enter' && !e.shiftKey) {
                        e.preventDefault();
                        sendAnswer(inputMessage);
                      }
                    }}
                    placeholder="–ü–æ–¥–µ–ª–∏—Å—å —Å–≤–æ–∏–º–∏ –º—ã—Å–ª—è–º–∏..."
                    className="w-full px-4 py-3 border-2 border-gray-200 rounded-xl resize-none focus:outline-none focus:border-purple-500 transition-colors text-lg"
                    rows="3"
                    disabled={isTyping}
                  />
                </div>
                <div className="flex flex-col gap-2">
                  <button
                    onClick={() => sendAnswer(inputMessage)}
                    disabled={!inputMessage.trim() || isTyping}
                    className="px-6 py-3 bg-gradient-to-r from-purple-500 to-blue-600 text-white rounded-xl hover:from-purple-600 hover:to-blue-700 disabled:opacity-50 disabled:cursor-not-allowed transition-all duration-300 flex items-center gap-2 font-medium"
                  >
                    <Send className="w-4 h-4" />
                    –û—Ç–≤–µ—Ç–∏—Ç—å
                  </button>
                  <button
                    onClick={skipQuestion}
                    disabled={isTyping}
                    className="px-6 py-3 bg-gray-100 text-gray-600 rounded-xl hover:bg-gray-200 transition-colors flex items-center gap-2 text-sm"
                  >
                    <SkipForward className="w-4 h-4" />
                    –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å
                  </button>
                </div>
              </div>

              {/* –ü–æ–¥—Å–∫–∞–∑–∫–∏ */}
              <div className="flex items-center justify-center gap-6 text-sm text-gray-500">
                <div className="flex items-center gap-1">
                  <div className="w-2 h-2 bg-purple-500 rounded-full"></div>
                  –ë—É–¥—å —á–µ—Å—Ç–Ω—ã–º - —ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç –≤ –∞–Ω–∞–ª–∏–∑–µ
                </div>
                <div className="flex items-center gap-1">
                  <div className="w-2 h-2 bg-blue-500 rounded-full"></div>
                  –ú–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Å–ª–æ–∂–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
                </div>
                <div className="flex items-center gap-1">
                  <div className="w-2 h-2 bg-green-500 rounded-full"></div>
                  –ù–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –∏–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
                </div>
              </div>
            </div>
          ) : (
            /* –ö–Ω–æ–ø–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è */
            <div className="text-center">
              <button
                onClick={proceedToResults}
                className="px-8 py-4 bg-gradient-to-r from-purple-500 to-blue-600 text-white rounded-xl hover:from-purple-600 hover:to-blue-700 transition-all duration-300 flex items-center gap-3 mx-auto font-semibold text-lg shadow-lg hover:shadow-xl transform hover:scale-105"
              >
                –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–∏ —Å—É–ø–µ—Ä—Å–∏–ª—ã
                <ArrowRight className="w-5 h-5" />
              </button>
              <p className="text-sm text-gray-500 mt-3">
                Jess –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª–∞ {userAnswers.length} –∏–∑ {questions.length} –æ—Ç–≤–µ—Ç–æ–≤
              </p>
            </div>
          )}
        </div>
      </div>

      {/* –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º (–º–æ–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è) */}
      <div className="md:hidden bg-white border-t border-gray-200 px-6 py-3">
        <div className="flex items-center justify-between text-sm">
          <div className="flex items-center gap-2">
            <Bot className="w-4 h-4 text-purple-500" />
            <span className="text-gray-600">Jess</span>
          </div>
          <div className="text-gray-500">
            {currentQuestionIndex + 1} / {questions.length}
          </div>
        </div>
      </div>
    </div>
  );
};

export default OnboardingAssessment;